[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.black]
# Line length
line-length = 88

# Python versions to target
target-version = ['py38', 'py39', 'py310', 'py311']

# Include file patterns
include = '\.pyi?$'

# Exclude file patterns
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# Skip string normalization (keep single quotes)
skip-string-normalization = false

# Skip magic trailing comma
skip-magic-trailing-comma = false

# Preview mode (enable unstable features)
preview = false

# Force exclude files even when passed explicitly
force-exclude = '''
/(
  migrations/
  | \.git/
  | \.mypy_cache/
  | \.pytest_cache/
  | __pycache__/
)/
'''

[tool.isort]
# Profile to use (black compatible)
profile = "black"

# Line length (should match black)
line_length = 88

# Multi-line output mode (3 = Vertical Hanging Indent)
multi_line_output = 3

# Include trailing comma
include_trailing_comma = true

# Force grid wrap
force_grid_wrap = 0

# Use parentheses for line continuation
use_parentheses = true

# Ensure new line before comments
ensure_newline_before_comments = true

# Known first party modules
known_first_party = ["myapp"]

# Known third party modules
known_third_party = ["requests", "pytest", "django", "flask"]

# Known local folder
known_local_folder = ["tests"]

# Sections order
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# Force single line imports
force_single_line = false

# Force sort within sections
force_sort_within_sections = true

# Show diff when changes would be made
show_diff = false

# Skip files
skip = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    "venv",
    "env",
    ".venv",
    ".env",
    "migrations",
]

# Skip glob patterns
skip_glob = ["**/migrations/*.py"]

[tool.mypy]
# Python version
python_version = "3.8"

# Warn about unused configs
warn_unused_configs = true

# Disallow untyped definitions
disallow_untyped_defs = true

# Disallow incomplete definitions
disallow_incomplete_defs = true

# Check untyped definitions
check_untyped_defs = true

# Disallow untyped decorators
disallow_untyped_decorators = true

# No implicit optional
no_implicit_optional = true

# Warn about redundant casts
warn_redundant_casts = true

# Warn about unused ignores
warn_unused_ignores = true

# Warn about returning Any
warn_return_any = true

# Warn about unreachable code
warn_unreachable = true

# Strict equality
strict_equality = true

# Show error codes
show_error_codes = true

# Pretty print errors
pretty = true

# Show column numbers
show_column_numbers = true

# Show error context
show_error_context = true

# Namespace packages
namespace_packages = true

# Ignore missing imports for specific modules
[[tool.mypy.overrides]]
module = [
    "requests.*",
    "pytest.*",
    "setuptools.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Minimum version
minversion = "6.0"

# Add options
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

# Test markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Filter warnings
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
# Source directories
source = ["src"]

# Omit files
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]

# Branch coverage
branch = true

[tool.coverage.report]
# Exclude lines from coverage
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Show missing lines
show_missing = true

# Precision for coverage percentage
precision = 2

[tool.bandit]
# Exclude directories
exclude_dirs = ["tests", "venv", "env", ".venv", ".env"]

# Skip specific tests
skips = ["B101", "B601"]

# Confidence level
confidence = "medium"

# Severity level
severity = "medium"

# Format
format = "txt"

# Recursive
recursive = true